// Import color system from separate module
const colors = require("./colors");

function generateDemo({ title, embedded, iconBuild, sourceDirectory }) {

	const demoType = embedded ? "Embedded Icons" : "Referenced Icons";

	const description = embedded
		? `${iconBuild.processedIcons.length} icons generated by <a target="blank" href="https://github.com/npavkovic/svgs-to-icons">svgs-to-icons</a> with embedded SVG data. Load <code>icons.css</code> to use them.</p><p class="info">Source: ${sourceDirectory}<br>Output: ${iconBuild.directories.embeddedIcons}`
		: `${iconBuild.processedIcons.length} Icons generated by <a target="blank" href="https://github.com/npavkovic/svgs-to-icons">svgs-to-icons</a> with references to external SVG files. Load <code>icons.css</code> and include the directory of SVG files, <code>icons</code>, to use these icons.</p><p class="info">Source: ${sourceDirectory}<br>Output: ${iconBuild.directories.referencedIcons}`;

	const colorOptions = Object.keys(colors).reduce((acc, colorKey) => acc += `<option value="${colors[colorKey].value}">${colors[colorKey].name}</option>`, "");

	// Generate icon grid 
	const iconItems = iconBuild.processedIcons
		.map(
			(icon) => `
		<div class="icon-item" data-name="${icon.displayName.toLowerCase()}" data-class="${
				icon.className
			}">
			<div class="icon-wrapper">
				<div class="${icon.className}"></div>
			</div>
			<div class="icon-info">
				<p class="icon-name">${icon.displayName}</p>
				<button class="icon-class" data-copy='${ `<span class="${icon.className}"></span>`.replace(/'/g, '&apos;').replace(/"/g, '&quot;') }' title='Copy ${icon.displayName} icon HTML'>${
					icon.className
				}
				</button>
			</div>
		</div>`
		)
		.join("");

	return `<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>${title} - ${demoType}</title>
	<meta name="description" content="Interactive demo of SVG icons that have been converted to CSS classes. Preview and test icons with controls for size, color, and styling.">
	<script>
		<!-- Set the dark-theme class based on current user preference -->
		document.documentElement.classList.toggle('dark-theme', window.matchMedia("(prefers-color-scheme: dark)").matches);
	</script>
	<style>
		@import "./icons.css";

		:root {
			--icon-size: 48px;
			--icon-color: #000000;
			--background-color: transparent;
			--background-radius: 8px;
			--br: 12px;
			
			--border-primary: #D1D1D1;
			--button-on-surface-hover: #000;
			--button-on-surface: #444;
			--button-surface-hover: #CCCCCC;
			--button-surface:#e6e6e6;
			--focused-outline: #6674A9;
			--on-surface-primary: #000;
			--on-surface-secondary: #454545;
			--surface-primary: #F2F2F2;
			--surface-secondary: #FFF;
			--theme-selected-color: #22c55e;
		}
		
		html.dark-theme {
			--border-primary: #444;
			--button-on-surface-hover: #FFF;
			--button-on-surface: #AAA;
			--button-surface-hover: #444;
			--button-surface: #333;
			--focused-outline: #7C8DC7;
			--on-surface-primary: #FFF;
			--on-surface-secondary: #CCC;
			--surface-primary: #1A1A1A;
			--surface-secondary: #000;
		}
		
		* {
			margin: 0;
			padding: 0;
			box-sizing: border-box;
			
			&:focus {
				outline: none;
			}
			
			&:focus-visible {
				outline: 2px solid var(--focused-outline);
				outline-offset: 2px;
			}
		}
		
		body {
			font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
			background: var(--surface-primary);
			color: #444;
			line-height: 1.5;
			padding: 24px;
			min-height: 100vh;
			text-wrap: pretty;
			color: var(--on-surface-primary);
			transition: background-color 0.3s ease, color 0.3s ease;
		}
		
		main {
			max-width: 1200px;
			margin: 0 auto;
		}
		
		header {
			max-width: 725px;
			margin: 0 auto 54px auto; 
			
			> * {
				margin: 0 auto 12px auto;
			}
		}
		
		a {
			color: inherit;
			text-underline-offset: 5px;
			text-decoration-color: #666;
		}
		
		
		h1 {
			font-size: 2.5rem;
			text-align: center;
		}
		
		.subtitle, .subtitle-file-protocol, .info  {
			text-align: center;
			color: var(--on-surface-secondary);
			font-size: 1.2rem;
			text-wrap: balance;
		}
		
		.info {
			font-size: 0.75rem;
		}

		.instructions {
			text-align: left;
			font-size: 0.75rem;
			font-style: italic;
			margin-bottom: 12px;
		}
		
		.subtitle-file-protocol { 
			display: none; 
		}
		
		html.file-protocol {
			.subtitle { display: none; }
			.subtitle-file-protocol { display: block; }
			#control-panel { display: none; }
			#icon-grid { display: none; }
			.instructions { display: none; }
		}

		/* Control Panel */
		#control-panel {
			border-radius: var(--br);
			padding: 24px;
			margin: 0 auto 32px auto;
			display: grid;
			grid-template-columns: repeat(5, 1fr);
			gap: 20px;
			background: var(--surface-secondary);
		}
			
		.control-group {
			display: flex;
			flex-direction: column;
			gap: 8px;
		}
		
		.search-group {
			grid-column: 1 / -1;
		}
		
		.theme-group .theme-toggle-container {
			display: flex;
			gap: 8px;
			justify-content: flex-start;
			align-items: center;
			height: 44px;
		}
		
		.theme-toggle-container {
			input {
				position: absolute; 
				opacity: 0; 
				width: 0; 
				height: 0;
			}
			
			label {
				cursor: pointer;
				display: flex;
				align-items: center;
				justify-content: center;
				width: 28px;
				height: 28px;
				border-radius: 50%;
				background-color: var(--button-surface);
				color: var(--button-on-surface);
				transition: background-color 0.2s ease;
			}
			
			input[type="radio"]:focus-visible + label {
				outline: 2px solid var(--focused-outline);
				outline-offset: 2px;
			}
			
			input[type="radio"]:checked + label {
				background-color: var(--theme-selected-color);
				color: white;
			}
		}
		
		label {
			font-weight: bold;
			font-size: 0.875rem;
		}
		
		select, input {
			padding: 12px;
			border: 1px solid var(--border-primary);
			border-radius: 8px;
			font-family: inherit;
			font-size: 0.875rem;
			transition: border-color 0.2s ease;
		}
		
		select { 
			appearance: none;
			-webkit-appearance: none;
			-moz-appearance: none;
			background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='1em' height='1em' fill='currentColor' viewBox='0 0 16 16'%3E%3Cpath d='M8 11.207 3.396 6.604l.707-.707L8 9.793l3.896-3.896.707.707L8 11.207z'/%3E%3C/svg%3E");
			background-repeat: no-repeat;
			background-position: right 12px center;
			background-size: 1em;
			padding-right: 36px;
		}
		
		#icon-grid {
			display: grid;
			grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
			gap: 16px;
		}
		
		.icon-item {
			border-radius: var(--br);
			padding: 20px;
			text-align: center;
			transition: all 0.2s ease;
			position: relative;
			background: var(--surface-secondary);
		}
		
		.icon-wrapper {
			display: grid;
			place-content: center;
			margin: 0 auto 16px auto;
			padding: calc(var(--icon-size) / 3);
			width: min-content;
			aspect-ratio: 1;
			position: relative;
			background: var(--background-color);
			border-radius: var(--background-radius);
			transition: background-color 0.2s ease, border-radius 0.2s ease;
		}
		
		.icon-info {
			display: flex;
			flex-direction: column;
			gap: 8px;
		}
		
		.icon-name {
			font-weight: bold;
			font-size: 0.875rem;
		}
		
		.icon-class {
			appearance: none;
			-webkit-appearance: none;
			font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
			font-size: 0.75rem;
			padding: 4px 12px;
			border-radius: 12px;
			width: fit-content;
			margin: 0 auto;
			word-break: break-all;
			position: relative;
			border: none;
			background-color: var(--button-surface);
			color: var(--button-on-surface);
			transition: background-color 0.3s ease, color 0.3s ease;
			
			&:hover {
				background-color: var(--button-surface-hover);
				color: var(--button-on-surface-hover);
			}
		}
				
		/* Demo-specific icon styles overrides */
		
		${iconBuild.iconSelector} {
			width: var(--icon-size);
			height: var(--icon-size);
			background-color: var(--icon-color);
			position: relative;
			transition: all 0.2s ease;
		}

		@media (max-width: 960px) {
			#control-panel {
				grid-template-columns: repeat(3, 1fr);
			}
			
			#icon-grid {
				grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
			}
		}
		
		@media (max-width: 640px) {
			body {
				padding: 16px;
			}
			
			h1 {
				font-size: 2rem;
			}
			
			#control-panel {
				grid-template-columns: 1fr;
			}
			
			#icon-grid {
				grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
			}
			
			.icon-item {
				padding: 16px;
			}
		}

	</style>
</head>
<body>
	<main>
		<header>
			<h1>${title}</h1>
			<p class="subtitle">${description}</p>
			<p class="subtitle-file-protocol">Referenced icons cannot be displayed if theyâ€™re loaded into the browser from a file. You can use a server to view this file, or open the <a href="${
				iconBuild.directories.embeddedIcons + "/index.html"
			}">embedded icon demo</a>.</p>
			
			
		</header>
		
		<div id="control-panel">
			<div class="control-group">
				<label for="icon-size-select">Size</label>
				<select id="icon-size-select">
					<option value="16">16px</option>
					<option value="24">24px</option>
					<option value="32">32px</option>
					<option value="48" selected>48px</option>
					<option value="64">64px</option>
					<option value="96">96px</option>
				</select>
			</div>
			
			<div class="control-group">
				<label for="icon-color-select">Icon Color</label>
				<select id="icon-color-select">
					<option id="default-icon-color" value="#000000" selected>Default Light Theme (Black)</option>
					${colorOptions}
				</select>
			</div>
			
			<div class="control-group">
				<label for="background-color-select">Background Color</label>
				<select id="background-color-select">
					<option id="default-background-color" value="transparent" selected>Default (Transparent)</option>
					${colorOptions}
				</select>
			</div>
			
			<div class="control-group">
				<label for="background-shape-select">Background Shape</label>
				<select id="background-shape-select">
					<option value="rounded" selected>Rounded Rectangle</option>
					<option value="circle">Circle</option>
					<option value="square">Square</option>
				</select>
			</div>
			
			<div class="control-group theme-group">
				<label>Theme</label>
				<div class="theme-toggle-container">
					<input type="radio" id="theme-light" name="theme" value="light">
					<label for="theme-light" title="Light Mode">
						<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="5"></circle><line x1="12" y1="1" x2="12" y2="3"></line><line x1="12" y1="21" x2="12" y2="23"></line><line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line><line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line><line x1="1" y1="12" x2="3" y2="12"></line><line x1="21" y1="12" x2="23" y2="12"></line><line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line><line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line></svg>
					</label>
					<input type="radio" id="theme-dark" name="theme" value="dark" >
					<label for="theme-dark" title="Dark Mode">
						<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path></svg>
					</label>
				</div>
			</div>
			
			<div class="control-group search-group">
				<label for="search-input">Search Icon Names</label>
				<input type="text" id="search-input" placeholder="Search by name..." />
			</div>
		</div>
		
		<p class="instructions">Click on the iconâ€™s class name (gray background) to copy its HTML to the clipboard.</p>
		<div id="icon-grid">
			${iconItems}
		</div>
	</main>
	
	<script>
		(function() {
			const isEmbedded = ${embedded};
			$ = selector => document.querySelector(selector);
			$s = selector => document.querySelectorAll(selector);
			$id = id => document.getElementById(id);
			
			const htmlElement = document.documentElement;
			const iconSizeSelect = $id('icon-size-select');
			const iconColorSelect = $id('icon-color-select');
			const backgroundColorSelect = $id('background-color-select');
			const backgroundShapeSelect = $id('background-shape-select');
			const searchInput = $id('search-input');
			const iconGrid = $id('icon-grid');
			const colorModeButtons = $('.theme-toggle-container');
			const iconColorDefault = $id('default-icon-color');
			
			// Helper function to update default icon color based on current theme
			function updateDefaultIconColor() {
				const isDarkMode = htmlElement.classList.contains('dark-theme');
				
				if (iconColorDefault && iconColorDefault.selected) {
					if (isDarkMode) {
						iconColorDefault.value = '#FFFFFF';
						iconColorDefault.textContent = 'Default Dark Theme (White)';
					} else {
						iconColorDefault.value = '#000000';
						iconColorDefault.textContent = 'Default Light Theme (Black)';
					}
					// Update the CSS if this option is selected
					htmlElement.style.setProperty('--icon-color', iconColorDefault.value);
				}
			}
			
			// Set initial theme mode based on documentElement class
			const lightModeButton = $id('theme-light');
			const darkModeButton = $id('theme-dark');
			const darkModeOn = htmlElement.classList.contains('dark-theme');
			lightModeButton.checked = !darkModeOn;
			darkModeButton.checked = darkModeOn;
			
			// Initialize default icon color based on system preference
			updateDefaultIconColor();
			
			// Theme mode toggle
			colorModeButtons.addEventListener('change', (e) => {
				htmlElement.classList.toggle('dark-theme', e.target.value === 'dark');
				updateDefaultIconColor();
			});
			
			// Size control
			iconSizeSelect.addEventListener('change', (e) => {
				const size = e.target.value + 'px';
				htmlElement.style.setProperty('--icon-size', size);
			});
			
			// Icon color control
			iconColorSelect.addEventListener('change', (e) => {
				htmlElement.style.setProperty('--icon-color', e.target.value);
			});
			
			// Background color control
			backgroundColorSelect.addEventListener('change', (e) => {
				htmlElement.style.setProperty('--background-color', e.target.value);
			});
			
			// Background shape control
			backgroundShapeSelect.addEventListener('change', (e) => {
				const shape = e.target.value;
				let radius;
				switch(shape) {
					case 'circle':
						radius = '50%';
						break;
					case 'square':
						radius = '0';
						break;
					case 'rounded':
					default:
						radius = '8px';
						break;
				}
				htmlElement.style.setProperty('--background-radius', radius);
			});
			
			// Search functionality
			searchInput.addEventListener('input', (e) => {
				const searchTerm = e.target.value.toLowerCase();
				$s('.icon-item').forEach(item => {
					const name = item.dataset.name;
					const className = item.dataset.class;
					const matches = name.includes(searchTerm) || className.includes(searchTerm);
					item.style.display = matches ? 'block' : 'none';
				});
			});
			
			// Initialize styles that are set by controls
			htmlElement.style.setProperty('--icon-size', '48px');
			htmlElement.style.setProperty('--icon-color', '#000000');
			htmlElement.style.setProperty('--background-color', 'transparent');
			htmlElement.style.setProperty('--background-radius', '8px');


			// Copy functionality using event delegation
			iconGrid.addEventListener('click', async (e) => {
				if(!e.target.classList.contains('icon-class')) return;
				e.preventDefault();
				try {
					await navigator.clipboard.writeText(e.target.dataset.copy);
				} catch (err) {
					console.error('Failed to copy text: ', err);
				}
				
			});
			
			// Display error message if trying to view referenced icons via file
			if (window.location.protocol === 'file:' && !isEmbedded) {
				htmlElement.classList.add('file-protocol');
			}
		})();
	</script>
</body>
</html>`;
}

module.exports = {
	generateDemo,
};
